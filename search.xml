<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Init</title>
    <url>/archives/66464b4a.html</url>
    <content><![CDATA[<p>Hello Hexo !!!<br>Hello Obsidian!!!</p>
]]></content>
  </entry>
  <entry>
    <title>Windows下编译v0.12.0 OpenOCD</title>
    <url>/archives/deb67521.html</url>
    <content><![CDATA[<p>在研究JTAG的过程中，需要使用daplink生成jtag master的波形给jtag ip，因此研究了一下openocd+daplink，不得不吐槽openocd这个项目真是一言难尽，记录一下Windows环境下编译openocd的过程。我发现如果用公司加密电脑，很有可能遇到不过编译器检查，这一步会生成一个conftest.c并尝试编译它来验证编译器是否ok，但是这个生成的会被加密软件加锁，导致fail，所以把这个坑分享出来。</p>
<span id="more"></span>
<h1 id="安装Msys2-工具链"><a href="#安装Msys2-工具链" class="headerlink" title="安装Msys2+工具链"></a>安装Msys2+工具链</h1><p><a href="https://www.msys2.org/">https://www.msys2.org/</a> 下载安装包并安装 一路next即可 注意打开 Mingw64这个shell</p>
<img src="/archives/deb67521/image-20240809150331331.png" class="">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br><span class="line">pacman -S libtool autoconf automake texinfo pkg-config make autogen git unzip bzip2 base-devel </span><br></pre></td></tr></table></figure>
<p>64bit:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S mingw-w64-x86_64-toolchain mingw-w64-x86_64-libusb mingw-w64-x86_64-libusb-compat-git mingw-w64-x86_64-hidapi mingw-w64-x86_64-libftdi mingw-w64-x86_64-capstone</span><br></pre></td></tr></table></figure>
<p>32bit:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S mingw-w64-i686-toolchain mingw-w64-i686-libusb mingw-w64-i686-libusb-compat-git mingw-w64-i686-hidapi mingw-w64-i686-libftdi mingw-w64-i686-capstone</span><br></pre></td></tr></table></figure>
<h1 id="下载openocd源码"><a href="#下载openocd源码" class="headerlink" title="下载openocd源码"></a>下载openocd源码</h1><p>直接git一把梭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --recurse-submodules git@github.com:openocd-org/openocd.git</span><br></pre></td></tr></table></figure>
<h1 id="生成-makefile"><a href="#生成-makefile" class="headerlink" title="生成 makefile"></a>生成 makefile</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd xxx #进openocd根目录</span><br><span class="line">./bootstrap #生成configure文件</span><br><span class="line"># 可以选择mkdir一个build文件夹cd进去编译</span><br><span class="line">./configure --enable-cmsis-dap </span><br><span class="line">#如果在build文件夹则 ../configure --enable-cmsis-dap</span><br><span class="line">#--disable-doxygen-pdf --enable-ft232r --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32</span><br></pre></td></tr></table></figure>
<p>具体的config配置选项可以通过 <code>./configure --help</code>查看，有些情况需要交叉编译则需要在这里指定–host与–build，我们这个情况不需要指定，有些教程还需要手动下载libusb再想办法链接进去，咱们这个都不需要，上面pacman已经装了libusb工具了<br>–enable-cmsis-dap因为我需要用基于hid 的cmsis dap所以我只开启了这个，还可以disable掉其他不需要的以提高编译速度<br>TIPS: 如果你用公司加密电脑，很有可能这一步不过编译器检查，我发现这一步会生成一个conftest.c并尝试编译它来验证编译器是否ok，但是这个生成的会被加密软件加锁，导致链接失败，具体根因不确定是不是这个，反正我公司电脑这一步怎么都过不了，但是家里的电脑一次就成功了</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>直接make一把梭，电脑cpu好的可以-j核心数，openocd比较大，要编一会</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>生成exe文件 打包 写一个packer.sh，用msys2 shell执行，如果提示缺zip则可以pacman -S装一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"></span><br><span class="line">OBJ_DIR=openocd-0.12.0-rc</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;OBJ_DIR&#125;</span><br><span class="line">mkdir $&#123;OBJ_DIR&#125;</span><br><span class="line">mkdir $&#123;OBJ_DIR&#125;/bin</span><br><span class="line">mkdir $&#123;OBJ_DIR&#125;/share</span><br><span class="line"></span><br><span class="line"># 复制主程序</span><br><span class="line">cp /mingw64/bin/openocd.exe     $&#123;OBJ_DIR&#125;/bin/</span><br><span class="line"># 复制一些依赖 DLL 文件</span><br><span class="line">cp /mingw64/bin/libcapstone.dll $&#123;OBJ_DIR&#125;/bin/</span><br><span class="line">cp /mingw64/bin/libftdi1.dll    $&#123;OBJ_DIR&#125;/bin/</span><br><span class="line">cp /mingw64/bin/libhidapi-0.dll $&#123;OBJ_DIR&#125;/bin/</span><br><span class="line">cp /mingw64/bin/libusb-1.0.dll  $&#123;OBJ_DIR&#125;/bin/</span><br><span class="line"></span><br><span class="line"># 复制配置文件</span><br><span class="line">cp /mingw64/share/openocd       $&#123;OBJ_DIR&#125;/share/  -r</span><br><span class="line"># 打 zip 包</span><br><span class="line">zip -r $&#123;OBJ_DIR&#125;.zip           $&#123;OBJ_DIR&#125;/</span><br></pre></td></tr></table></figure>

<h1 id="在windows-cmd中启动openocd"><a href="#在windows-cmd中启动openocd" class="headerlink" title="在windows cmd中启动openocd"></a>在windows cmd中启动openocd</h1><p>写一个启动脚本： run.bat</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openocd.exe -f pw.cfg -d4  <span class="comment"># -f 配置文件 -d4 开启4级log输出 正常使用可以删掉</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>用于验证paris jtag的cfg文件参考： pw.cfg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adapter driver cmsis-dap</span><br><span class="line">transport select jtag</span><br><span class="line"></span><br><span class="line">adapter speed 1000</span><br><span class="line"></span><br><span class="line">set _CHINPNAME custom</span><br><span class="line"></span><br><span class="line">jtag newtap custom tap -irlen 8  -expected-id 0x00000000</span><br><span class="line"></span><br><span class="line">init</span><br><span class="line"></span><br><span class="line"># idcode命令</span><br><span class="line">irscan custom.tap 0xFE</span><br><span class="line">drscan custom.tap 32 0x00000000 </span><br><span class="line"></span><br><span class="line"># bypass命令</span><br><span class="line">irscan custom.tap 0xFF</span><br><span class="line">drscan custom.tap 32 0x55555555</span><br><span class="line">drscan custom.tap 32 0xAAAAAAAA</span><br><span class="line">drscan custom.tap 32 0x55555555</span><br><span class="line"></span><br><span class="line"># 选通jtag2apb 向0x00600028写入0x55bbcc11</span><br><span class="line">irscan custom.tap 0x00</span><br><span class="line">drscan custom.tap 8 0xF0</span><br><span class="line">drscan custom.tap 40 0x0000600028 </span><br><span class="line">drscan custom.tap 32 0x55bbcc11</span><br><span class="line">drscan custom.tap 35 0x0 #respond</span><br><span class="line"></span><br><span class="line"># 选通jtag2apb 从0x00600028读取</span><br><span class="line">irscan custom.tap 0x00</span><br><span class="line">drscan custom.tap 8 0xF1</span><br><span class="line">drscan custom.tap 40 0x0000600028 </span><br><span class="line">drscan custom.tap 35 0x0 #respond</span><br></pre></td></tr></table></figure>
<h1 id="telnet连接OpenOCD命令行"><a href="#telnet连接OpenOCD命令行" class="headerlink" title="telnet连接OpenOCD命令行"></a>telnet连接OpenOCD命令行</h1><p>openocd启动后会本地起一个localhost：4444端口的telnet server，可以通过windows自带的telnet连接进去以实时输入openocd命令</p>
<p>前提是打开windows的telnet客户端功能：</p>
<img src="/archives/deb67521/image-20240809151048958.png" class="">

<p>直接win+r cmd启动！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet localhost 4444</span><br></pre></td></tr></table></figure>
<p>连接成功即可愉快操作openocd</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>openocd</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>数字花园搭建：Obsidian+Hexo+Github</title>
    <url>/archives/e12db737.html</url>
    <content><![CDATA[<img src="/archives/e12db737/image-20240718101929351.png" class="">
<p>之前发布hexo博客需要在安装了nodejs的电脑上反复执行hexo g &amp; hexo d，并且想要换台电脑就变得很麻烦，这次请Github Action代劳，于是除了第一次搭建需要本地deploy预览效果以外，其余时刻我可以抛弃nodejs只传输markdown文件，并且编辑端换上了更好用的Obsidian，快来和我一起搭建数字花园！</p>
<span id="more"></span>

<h1 id="Step-1-Github配置"><a href="#Step-1-Github配置" class="headerlink" title="Step 1: Github配置"></a>Step 1: Github配置</h1><h2 id="新建io仓库"><a href="#新建io仓库" class="headerlink" title="新建io仓库"></a>新建io仓库</h2><p>创建名为<code>$USER_NAME.github.io</code>的仓库，其中<code>$USER_NAME</code>为自己的GitHub用户名，GitHub会自动启用pages服务</p>
<img src="/archives/e12db737/image-20240718100249490.png" class="">
<h2 id="分支设置"><a href="#分支设置" class="headerlink" title="分支设置"></a>分支设置</h2><ul>
<li>hexo分支用来存放post+config，设置为default</li>
<li>master分支用来存放deploy出来的html，在Pages 设置里设置为deploy源头<img src="/archives/e12db737/image-20240718100611979.png" class=""></li>
</ul>
<h1 id="Step-2：本地Hexo第一次搭建"><a href="#Step-2：本地Hexo第一次搭建" class="headerlink" title="Step 2：本地Hexo第一次搭建"></a>Step 2：本地Hexo第一次搭建</h1><h2 id="下载环境"><a href="#下载环境" class="headerlink" title="下载环境"></a>下载环境</h2><h3 id="下载Git-Node-js"><a href="#下载Git-Node-js" class="headerlink" title="下载Git &amp; Node.js"></a>下载Git &amp; Node.js</h3><ul>
<li><a href="https://git-scm.com/downloads">Git Download</a></li>
<li><a href="https://nodejs.org/en">Node.js Download</a></li>
</ul>
<h3 id="配置Github-SSH"><a href="#配置Github-SSH" class="headerlink" title="配置Github SSH"></a>配置Github SSH</h3><p>打开Git bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519</span><br></pre></td></tr></table></figure>
<p>一路回车，在C:\Users\用户名.ssh文件夹下有生成的ssh key，需要将pub内容复制到github设置里面，才能通过ssh的方式上传下载远程仓库</p>
<img src="/archives/e12db737/image-20240718104540557.png" class="">
<h3 id="NPM换源"><a href="#NPM换源" class="headerlink" title="NPM换源"></a>NPM换源</h3><p>装完nodejs就可以使用npm来下载hexo包了，但是npm下载node包有时因为网络问题而卡住，可以尝试换源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>
<h3 id="下载仓库至本地pc"><a href="#下载仓库至本地pc" class="headerlink" title="下载仓库至本地pc"></a>下载仓库至本地pc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;user_name&quot; # user_name 填入 GitHub 用户名</span><br><span class="line">git config --global user.email &quot;user_email&quot; # user_email 填入 GitHub 注册的邮箱</span><br><span class="line">git clone git@github.com:MonostableLSD/monostablelsd.github.io.git</span><br><span class="line">cd monostablelsd.github.io</span><br><span class="line">git branch -a #确认处于hexo分支上</span><br></pre></td></tr></table></figure>
<h3 id="安装-hexo-next主题"><a href="#安装-hexo-next主题" class="headerlink" title="安装 hexo &amp; next主题"></a>安装 hexo &amp; next主题</h3>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-theme-next@latest --save #安装next主题</span><br></pre></td></tr></table></figure>

<p>  <strong>注意不要装成theme-next</strong> <a href="https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848">ref</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\aemaeth\Documents\MyBlog\monostablelsd.github.io&gt; hexo -v</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 7.3.0</span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: win32 10.0.19045 undefined</span><br><span class="line">node: 20.15.1</span><br><span class="line">acorn: 8.11.3</span><br><span class="line">ada: 2.7.8</span><br><span class="line">ares: 1.28.1</span><br><span class="line">base64: 0.5.2</span><br><span class="line">brotli: 1.1.0</span><br><span class="line">cjs_module_lexer: 1.2.2       </span><br><span class="line">cldr: 45.0</span><br><span class="line">icu: 75.1</span><br><span class="line">llhttp: 8.1.2</span><br><span class="line">modules: 115</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.61.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 1.1.0</span><br><span class="line">openssl: 3.0.13+quic</span><br><span class="line">simdutf: 5.2.8</span><br><span class="line">tz: 2024a</span><br><span class="line">undici: 6.13.0</span><br><span class="line">unicode: 15.1</span><br><span class="line">uv: 1.46.0</span><br><span class="line">uvwasi: 0.0.21</span><br><span class="line">v8: 11.3.244.8-node.23</span><br><span class="line">zlib: 1.3.0.1-motley-7d77fb7</span><br></pre></td></tr></table></figure>
<h2 id="配置博客页面设计"><a href="#配置博客页面设计" class="headerlink" title="配置博客页面设计"></a>配置博客页面设计</h2><p>想要发布主页到<code>github pages</code>以及设计出个性化的主页，需要：</p>
<ul>
<li><p>对博客根目录下的<code>_config.yml</code>进行参数修改</p>
</li>
<li><p>利用hexo5.0以后的新特性对主题配置文件进行Alternate后再修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注意冒号后要空格</strong></p>
</li>
</ul>
<h3 id="Hexo本体配置"><a href="#Hexo本体配置" class="headerlink" title="Hexo本体配置"></a>Hexo本体配置</h3><p><code>_config.yml</code> <a href="https://hexo.io/docs/configuration">官方文档</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 博客基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Aemaeth0&#x27;s</span> <span class="string">Notes</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;Stay Simple &amp; Stay Naive&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;EE,IC,Linux,C/C++,Control theory&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Aemaeth0</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 网址设置</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://aemaeth0.xyz</span></span><br><span class="line"><span class="comment">#permalink: :year/:month/:day/:title/ #文章永久链接</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;_template/*&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;.obsidian/*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span> </span><br><span class="line"><span class="attr">ignore:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="comment">#文章内是否显示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">false</span></span><br><span class="line"> <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:MonostableLSD/monostablelsd.github.io.git</span> <span class="comment"># 你的Github仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h3><p><code>_config.next.yml</code> <a href="https://theme-next.js.org/docs/theme-settings/">官方文档</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"><span class="comment"># It&#x27;s recommended to use Alternate Theme Config to configure NexT</span></span><br><span class="line"><span class="comment"># Modifying this file may result in merge conflict</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/getting-started/configuration</span></span><br><span class="line"><span class="comment"># ===============================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Theme Core Configuration Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/theme-settings/</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow to cache content generation.</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove unnecessary files after hexo generate.</span></span><br><span class="line"><span class="attr">minify:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">...主题设置内容太多</span> <span class="string">具体可参考官网</span> <span class="string">https://theme-next.js.org/docs/theme-settings/</span></span><br></pre></td></tr></table></figure>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>&#x2F;&#x2F;待续</p>
<ul>
<li>搜索</li>
</ul>
<h3 id="主页手动创建"><a href="#主页手动创建" class="headerlink" title="主页手动创建"></a>主页手动创建</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags /about /categories</span><br></pre></td></tr></table></figure>
<h3 id="本地预览效果"><a href="#本地预览效果" class="headerlink" title="本地预览效果"></a>本地预览效果</h3><p>通过config修改网页配置后，想要预览一下效果，可以hexo本地部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\aemaeth\Documents\MyBlog\monostablelsd.github.io&gt; hexo clean</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br><span class="line">PS C:\Users\aemaeth\Documents\MyBlog\monostablelsd.github.io&gt; hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  ==================================</span><br><span class="line">  ███╗   ██╗███████╗██╗  ██╗████████╗</span><br><span class="line">  ████╗  ██║██╔════╝╚██╗██╔╝╚══██╔══╝</span><br><span class="line">  ██╔██╗ ██║█████╗   ╚███╔╝    ██║</span><br><span class="line">  ██║╚██╗██║██╔══╝   ██╔██╗    ██║</span><br><span class="line">  ██║ ╚████║███████╗██╔╝ ██╗   ██║</span><br><span class="line">  ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝   ╚═╝</span><br><span class="line">========================================</span><br><span class="line">NexT version 8.20.0</span><br><span class="line">Documentation: https://theme-next.js.org</span><br><span class="line">========================================</span><br><span class="line">INFO  Start processing</span><br><span class="line">Markdown Image Path: ![](数字花园搭建：Obsidian+Hexo+Github/image-20240718101929351.png)</span><br><span class="line">asset_img string: &#123;% asset_img image-20240718101929351.png  %&#125;</span><br><span class="line">Markdown Image Path: ![](数字花园搭建：Obsidian+Hexo+Github/image-20240718100249490.png)</span><br><span class="line">asset_img string: &#123;% asset_img image-20240718100249490.png  %&#125;</span><br><span class="line">Markdown Image Path: ![](数字花园搭建：Obsidian+Hexo+Github/image-20240718100611979.png)</span><br><span class="line">asset_img string: &#123;% asset_img image-20240718100611979.png  %&#125;</span><br><span class="line">Markdown Image Path: ![](数字花园搭建：Obsidian+Hexo+Github/image-20240718104540557.png)</span><br><span class="line">asset_img string: &#123;% asset_img image-20240718104540557.png  %&#125;</span><br><span class="line">INFO  Files loaded in 134 ms</span><br><span class="line">INFO  Generated: about/index.html</span><br><span class="line">INFO  Generated: categories/index.html</span><br><span class="line">INFO  Generated: archives/66464b4a.html</span><br><span class="line">INFO  Generated: archives/2024/index.html</span><br><span class="line">INFO  Generated: archives/2019/index.html</span><br><span class="line">INFO  Generated: archives/2020/index.html</span><br><span class="line">INFO  Generated: archives/2019/01/index.html</span><br><span class="line">INFO  Generated: archives/2020/01/index.html</span><br><span class="line">INFO  Generated: tags/index.html</span><br><span class="line">INFO  Generated: search.xml</span><br><span class="line">INFO  Generated: archives/2024/07/index.html</span><br><span class="line">INFO  Generated: categories/Tech/index.html</span><br><span class="line">INFO  Generated: tags/obsidian/index.html</span><br><span class="line">INFO  Generated: images/favicon-16x16-next.png</span><br><span class="line">INFO  Generated: tags/hexo/index.html</span><br><span class="line">INFO  Generated: tags/Without-OS/index.html</span><br><span class="line">INFO  Generated: tags/github/index.html</span><br><span class="line">INFO  Generated: tags/MCU/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives/53bd0ece.html</span><br><span class="line">INFO  Generated: archives/e12db737.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/e12db737/image-20240718101929351.png</span><br><span class="line">INFO  Generated: images/back/apple-touch-icon-next.png</span><br><span class="line">INFO  Generated: images/favicon-32x32-next.png</span><br><span class="line">INFO  Generated: images/apple-touch-icon-next.png</span><br><span class="line">INFO  Generated: images/avatar.gif</span><br><span class="line">INFO  Generated: images/logo.svg</span><br><span class="line">INFO  Generated: js/comments.js</span><br><span class="line">INFO  Generated: css/main.css</span><br><span class="line">INFO  Generated: CNAME</span><br><span class="line">INFO  Generated: images/algolia_logo.svg</span><br><span class="line">INFO  Generated: js/third-party/addtoany.js</span><br><span class="line">INFO  Generated: images/cc-by-nc.svg</span><br><span class="line">INFO  Generated: js/third-party/analytics/matomo.js</span><br><span class="line">INFO  Generated: images/cc-by-nc-sa.svg</span><br><span class="line">INFO  Generated: images/cc-by-sa.svg</span><br><span class="line">INFO  Generated: images/cc-by-nd.svg</span><br><span class="line">INFO  Generated: images/cc-zero.svg</span><br><span class="line">INFO  Generated: images/cc-by.svg</span><br><span class="line">INFO  Generated: images/quote-r.svg</span><br><span class="line">INFO  Generated: images/cc-by-nc-nd.svg</span><br><span class="line">INFO  Generated: images/weChat-pub.jpg</span><br><span class="line">INFO  Generated: archives/e12db737/image-20240718100249490.png</span><br><span class="line">INFO  Generated: images/weChat.png</span><br><span class="line">INFO  Generated: css/noscript.css</span><br><span class="line">INFO  Generated: js/motion.js</span><br><span class="line">INFO  Generated: js/config.js</span><br><span class="line">INFO  Generated: images/hexo-avatar.png</span><br><span class="line">INFO  Generated: js/sidebar.js</span><br><span class="line">INFO  Generated: js/next-boot.js</span><br><span class="line">INFO  Generated: archives/e12db737/image-20240718100611979.png</span><br><span class="line">INFO  Generated: js/utils.js</span><br><span class="line">INFO  Generated: archives/e12db737/image-20240718104540557.png</span><br><span class="line">INFO  Generated: js/third-party/search/local-search.js</span><br><span class="line">INFO  Generated: images/net-logo.png</span><br><span class="line">INFO  Generated: images/back/hexo-avatar.png</span><br><span class="line">INFO  Generated: images/benjamin-voros-phIFdC6lA4E-unsplash.jpg</span><br><span class="line">INFO  59 files generated in 380 ms</span><br><span class="line">PS C:\Users\aemaeth\Documents\MyBlog\monostablelsd.github.io&gt; hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  ==================================</span><br><span class="line">  ███╗   ██╗███████╗██╗  ██╗████████╗</span><br><span class="line">  ████╗  ██║██╔════╝╚██╗██╔╝╚══██╔══╝</span><br><span class="line">  ██╔██╗ ██║█████╗   ╚███╔╝    ██║</span><br><span class="line">  ██║╚██╗██║██╔══╝   ██╔██╗    ██║</span><br><span class="line">  ██║ ╚████║███████╗██╔╝ ██╗   ██║</span><br><span class="line">  ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝   ╚═╝</span><br><span class="line">========================================</span><br><span class="line">NexT version 8.20.0</span><br><span class="line">Documentation: https://theme-next.js.org</span><br><span class="line">========================================</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>浏览器访问<a href="http://localhost:4000/%E5%8D%B3%E5%8F%AF%E9%A2%84%E8%A7%88">http://localhost:4000/即可预览</a></p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>至此，在_config.yml中配置好deploy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:xxx.git # 你的Github仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>就可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>将网页部署到github master分支上去，它就可以自动渲染html页面了，但每次都要借助hexo cli来更新博客，还是感觉有点麻烦，因此借助github action来实现自动部署</p>
<h2 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h2><h3 id="配置deploy脚本"><a href="#配置deploy脚本" class="headerlink" title="配置deploy脚本"></a>配置deploy脚本</h3><p>在本地hexo分支下新建.github&#x2F;workflows&#x2F;hexo-deploy.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Hexo Deploy</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - hexo</span><br><span class="line">env:</span><br><span class="line">  GIT_USER: aemaeth</span><br><span class="line">  GIT_EMAIL: monostablelss@gmail.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout deploy branch</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          ref: hexo</span><br><span class="line">          path: ./</span><br><span class="line"></span><br><span class="line">      - name: Set up Node.js</span><br><span class="line">        uses: actions/setup-node@v2</span><br><span class="line">        with:</span><br><span class="line">          node-version: 14</span><br><span class="line"></span><br><span class="line">      - name: Remove Deploy_git</span><br><span class="line">        run: |</span><br><span class="line">          rm -rf .deploy_git</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install &amp;&amp; npm run build</span><br><span class="line"></span><br><span class="line">      - name: Hexo c &amp; g</span><br><span class="line">        run: |</span><br><span class="line">          npm run build</span><br><span class="line">          </span><br><span class="line">      - name: Configuration environment</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name $GIT_USER</span><br><span class="line">          git config --global user.email $GIT_EMAIL</span><br><span class="line"></span><br><span class="line">      - name: Deploy</span><br><span class="line">        run: |</span><br><span class="line">          npm run deploy</span><br></pre></td></tr></table></figure>
<p>Github Action的原理是，通过一个yml告诉github要做的workflow，它会在一个虚拟环境里面帮忙执行workflow里面的操作，github提供一个action market，可以调用这些market里面的action，本质是虚拟了一个命令行环境，可以认为是另一台电脑。<br>上面的yml描述了这样的workflow：当hexo分支push时触发这个workflow，虚拟一个ubuntu环境，先checkout下载repo hexo分支，再帮忙按照package.json描述npm安装node包，pacage.json如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo clean &amp;&amp; hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;hexo server&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;7.3.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^7.3.0&quot;,</span><br><span class="line">    &quot;hexo-abbrlink&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;hexo-filter-nofollow&quot;: &quot;^2.0.2&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-searchdb&quot;: &quot;^1.4.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-image-link&quot;: &quot;^0.0.6&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^6.3.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-symbols-count-time&quot;: &quot;^0.7.1&quot;,</span><br><span class="line">    &quot;hexo-theme-next&quot;: &quot;^8.20.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>npm run build即执行 hexo clean &amp;&amp; hexo generate，生成要发布到master的public文件</p>
<h3 id="设置deploy-key"><a href="#设置deploy-key" class="headerlink" title="设置deploy key"></a>设置deploy key</h3><p>当github action帮我们在虚拟环境里hexo d的时候，这个环境是没有ssh权限的，因此需要偷偷给虚拟环境一个密钥，并且把公钥告诉github，这里要用到github secret功能<br>首先在本地pc生成一对公钥密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure>
<p>将密钥（非pub后缀）内容复制进github secret，并命名HEXO_DEPLOY_PRI</p>
<img src="/archives/e12db737/image-20240718124456480.png" class="">
<p>将公钥(pub后缀)内容复制进github deploy key，并命名HEXO_DEPLOY_PUB</p>
<img src="/archives/e12db737/image-20240718124628093.png" class="">

<p>通过yml脚本取出secret密钥存入虚拟环境的.ssh中，并配置git操作，这样才能正常hexo d</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- name: Configuration environment</span><br><span class="line">  env:</span><br><span class="line">    HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">  run: |</span><br><span class="line">    mkdir -p ~/.ssh/</span><br><span class="line">    echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">    chmod 600 ~/.ssh/id_rsa</span><br><span class="line">    ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">    git config --global user.name $GIT_USER</span><br><span class="line">    git config --global user.email $GIT_EMAIL</span><br></pre></td></tr></table></figure>
<h3 id="调试workflow"><a href="#调试workflow" class="headerlink" title="调试workflow"></a>调试workflow</h3><p>如果遇到问题可以在github action页面看到workflow的log，可以帮助定位问题</p>
<img src="/archives/e12db737/image-20240718125025674.png" class="">

<h3 id="错误邮件通知"><a href="#错误邮件通知" class="headerlink" title="错误邮件通知"></a>错误邮件通知</h3><p>可以修改GitHub notification使workflow失败时发邮件通知</p>
<img src="/archives/e12db737/image-20240718125151815.png" class="">
<h3 id="gitignore配置"><a href="#gitignore配置" class="headerlink" title="gitignore配置"></a>gitignore配置</h3><p>一旦完成了action流程调试、不再需要hexo cli来操作博客，就可以放弃nodejs，因此可以gitignore掉node_moudules等比较大的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">.deploy*/</span><br><span class="line">public/</span><br><span class="line"># Ignore Smart Connections folder because embeddings file is large and updated frequently</span><br><span class="line">.smart-connections</span><br><span class="line">.trash</span><br><span class="line">.stignore</span><br></pre></td></tr></table></figure>
<h2 id="Obsidian配置"><a href="#Obsidian配置" class="headerlink" title="Obsidian配置"></a>Obsidian配置</h2><h3 id="打开仓库"><a href="#打开仓库" class="headerlink" title="打开仓库"></a>打开仓库</h3><p>打开source文件夹作为obsidian工作库，这时obsidian会在source下新建一个.obsidian文件夹用于存obsidian的信息与插件，我选择将其传入git，这样方便我在其他电脑上clone下来使用，可以在_config.yml中跳过这些文件夹的渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: </span><br><span class="line">    - &quot;_template/*&quot;</span><br><span class="line">    - &quot;.obsidian/*&quot;</span><br></pre></td></tr></table></figure>
<p>设置新文件路径：</p>
<img src="/archives/e12db737/image-20240718133204629.png" class="">
<h3 id="文件头模板"><a href="#文件头模板" class="headerlink" title="文件头模板"></a>文件头模板</h3><p>不使用hexo new来新建md时，需要手动添加文件头，obsidian有<a href="https://github.com/SilentVoid13/Templater">Templatter</a>方便插入</p>
<img src="/archives/e12db737/image-20240718131628988.png" class="">
<p>在source文件夹下新建一个_template&#x2F;tp-hexo-post-init.md</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;&lt;% tp.file.title %&gt;&#x27;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">mathjax: true</span><br><span class="line">date: &lt;% tp.date.now(&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;</span><br><span class="line">updated: &lt;% tp.date.now(&quot;YYYY-MM-DD HH:mm:ss&quot;) %&gt;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>设置模板文件夹为_template</p>
<img src="/archives/e12db737/image-20240718131735074.png" class="">
<p>同时_config.yml跳过渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: </span><br><span class="line">    - &quot;_template/*&quot;</span><br><span class="line">    - &quot;.obsidian/*&quot;</span><br></pre></td></tr></table></figure>
<p>新建博客后，点击左侧Templater符号即可插入</p>
<img src="/archives/e12db737/image-20240718132258384.png" class="">
<h3 id="图片粘贴"><a href="#图片粘贴" class="headerlink" title="图片粘贴"></a>图片粘贴</h3><p>想要hexo渲染图片原本不是一件容易的事情，但是可以利用obsidian的<a href="https://github.com/RainCat1998/obsidian-custom-attachment-location">Custom Attachment Location</a>插件与<a href="https://hexo.io/docs/asset-folders">Hexo asset folder机制</a>方便实现。前者会在用户向post粘贴图片时，自动创建一个post同名文件夹用来存储图片，并以相对路径应用；后者可以通过在_config.yml中设置打开post_asset_folder功能自动从同名文件夹中索引图片生成html。</p>
<h4 id="Custom-Attachment-设置"><a href="#Custom-Attachment-设置" class="headerlink" title="Custom Attachment 设置"></a>Custom Attachment 设置</h4><img src="/archives/e12db737/image-20240718133132518.png" class="">
<img src="/archives/e12db737/image-20240718133303105.png" class="">
<h4 id="Hexo-Asset-Folder设置"><a href="#Hexo-Asset-Folder设置" class="headerlink" title="Hexo Asset Folder设置"></a>Hexo Asset Folder设置</h4><p>修改_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><img src="/archives/e12db737/image-20240718133530799.png" class="">
<h3 id="Obsidian-Git"><a href="#Obsidian-Git" class="headerlink" title="Obsidian Git"></a>Obsidian Git</h3><p>安装<a href="https://github.com/Vinzent03/obsidian-git">Git</a>插件，按Ctrl+P，输入commit all change+push提交博客，自动发布</p>
<h1 id="Step-3：日常管理"><a href="#Step-3：日常管理" class="headerlink" title="Step 3：日常管理"></a>Step 3：日常管理</h1><p>经过如上一番操作，日常情况就可以抛弃nodejs，在某处的新电脑上，可以先配置好git、下载好obsidian，就可以开始更新博客了！</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>芯片原厂的嵌入式软件都在干什么</title>
    <url>/archives/2e15e323.html</url>
    <content><![CDATA[<img src="/archives/2e15e323/image-20240718165441091.png" class="">
<p>在学校每天call stm32 hal库的时候，总是在想，芯片原厂的软件工程师是不是特别nb。我对体系结构、芯片内部的细节这些东西有着天然的好奇心，但工科的知识不是靠看一两本书就能掌握的，要实践才能螺旋提升认识。毕业后运气好进了一个消费电子的芯片部门，终于小小窥见芯片软件的一些奥妙，它是矛盾的，芯片内部的这些智慧结晶有着强烈的赛博美感，但手里搬砖的活却多少有些苦逼，让我们一起看看芯片设计公司的嵌入式软件都在干什么。</p>
<span id="more"></span>
<h1 id="工作内容概述"><a href="#工作内容概述" class="headerlink" title="工作内容概述"></a>工作内容概述</h1><img src="/archives/2e15e323/image-20240719002019629.png" class="">
<blockquote>
<p><a href="https://www.instagram.com/ic.designer.meme/">ic.designer.meme instagram</a></p>
</blockquote>
<p>作为Fabless芯片设计公司，最底层的任务就是设计有市场的芯片并成功流片，这里面有几个风险：</p>
<ul>
<li>市场变化快，芯片研发慢</li>
<li>芯片太复杂，流片又太贵<br>因此，有各种方法来降低风险，为了尽快+成功流片，流片前就要想尽办法验证设计是不是有问题。结合自己的实际工作，我认为芯片软件一般在全流程中负责3个主要工作：</li>
</ul>
<ol>
<li><strong>硅前（pre-silicon）FPGA原型验证</strong>：流片（tape out）前用FPGA验证设计，借助FPGA&#x2F;EDA仿真环境协助前端数字IC Designer对bug进行定位</li>
<li><strong>硅后（post-silicon）Bringup</strong>：芯片制造、封装好后，拿回来装在EVB上进行一系列实测，~~~必要时进行一些软件兜底补救措施~~~</li>
<li><strong>SDK&#x2F;HAL软件包交付</strong>：芯片卖给客户，总不能让客户照着寄存器手册做应用，所以要编写SDK及其文档，最好能写一些应用demo<br>另外，还有一些上位机、自动化脚本的开发，这些一般不是release给客户级别的，借助ChatGPT和一点点QT&#x2F;C#&#x2F;Python基础就可以做到。</li>
</ol>
<h1 id="FPGA原型验证"><a href="#FPGA原型验证" class="headerlink" title="FPGA原型验证"></a>FPGA原型验证</h1><h2 id="Testcase表格"><a href="#Testcase表格" class="headerlink" title="Testcase表格"></a>Testcase表格</h2><p>一个新芯片项目kickoff时，一般前期的市场分析、架构设计差不多就做完了。RTL未动，文档先行。数字前端的哥们会开始写各个模块&#x2F;IP的微架构文档（Micro Architecture Spec），等他们写好MAS，软件就可以开始编写TestCase。具体来说，TestCase就是一个验证计划excel，根据IP功能规划FPGA环境上要验什么，一个UART的TestCase例子：</p>
<img src="/archives/2e15e323/image-20240719105006239.png" class="">
<p>什么样的TestCase才算一个好的TestCase？我认为这是一个吃经验的事情，必须对设计内部有一定理解，并且有大局观能够掌控好一种验证的边界感，要时刻铭记”尽快成功流片“的目标，要尽可能验到每一种实际可能出现的情况，但不能异想天开整一些非常极端钻牛角尖的case。<br>接着就是写一个初步的测试代码，为了保证rtl freeze deadline前能顺利验完，验证代码不用特别考虑代码可移植性等面向用户的特性，不过如果后面SDK阶段想要少做一些重复工作，可以自己权衡要做到什么程度，这一阶段的首要目标是验证功能，如果一个简单的模块要写好几天驱动代码，会被PM蛐蛐的，SDK那种架构严谨的代码可以等到rtl freeze后再慢慢整。因为这个时候可能还没有具体的rtl 设计，因此只是一个初步的验证代码框架。<br>做好TestCase和初步代码，一般会拉着软件同事和前端设计一起review一下，看下有没有什么遗漏的点。</p>
<h2 id="等待Bitfile"><a href="#等待Bitfile" class="headerlink" title="等待Bitfile"></a>等待Bitfile</h2><p>前期一般不会很快拿到Bitfile，RTL IP Coding完还要集成，集成完还要综合，<del>这个时间难道可以摸鱼挂机吗（狂喜）</del>？除了看MAS、写TestCase及代码，我们还可以看下架构文档，进一步了解芯片的使用场景。此外，我们EDA验证同事还帮忙搭建了一个名为”Quattro“的VCS环境，用于在综合前进行top级C仿真，这个平台可以吃我们编译出的程序bin文件，启动CPU执行，并dump出详细的fsdb波形，与FPGA验证形成了互补，后期有一些FPGA验证过程遇到的设计bug，如果要综合出带debug ILA的bit会很慢，Quattro更方便看到内部的信号（虽然top级VCS仿真也要跑几个小时）。<br>总之，这是一段相对不忙的时间。</p>
<h2 id="正式FPGA验证"><a href="#正式FPGA验证" class="headerlink" title="正式FPGA验证"></a>正式FPGA验证</h2><p>敲锣打鼓FPGA工程师终于release了第一个版本的bitfile。Vivado，启动！烧录bit进FPGA平台，就可以把它当作一颗SOC使用了，一般最先开始的是jtag和cpu启动，负责启动的同事要保证工程能run到main函数，接着负责uart的同事确保串口能正常使用，以便打印调试信息，这样其他哥们就能开始各个模块的验证了。<br>需要注意FPGA环境与真实环境会不一样，一定要注意分频可能会导致的问题，比如FPGA上这个CLK下一切正常，结果客户板子上晶振不一样，导致内部分频分不出精准的CLK，那就寄了。<br>图为[S2C S7 FPAG验证平台](<a href="https://www.s2ceda.com/ch/product-prototyping-ls-3">一体化原型验证平台满足各种IC设计验证需求 | 思尔芯S2C-思尔芯 | S2C (s2ceda.com)</a>)</p>
<img src="/archives/2e15e323/image-20240719150541081.png" class="" title="S2C S7验证平台">
<h2 id="Bug提交定位"><a href="#Bug提交定位" class="headerlink" title="Bug提交定位"></a>Bug提交定位</h2><p>验证过程中遇到问题提bugzilla给前端同事，必要时联合eda验证与前端一起定位bug，修改后回归验证，整个过程要记录在调试验证文档</p>
<h2 id="自动回归验证"><a href="#自动回归验证" class="headerlink" title="自动回归验证"></a>自动回归验证</h2><p>在验证过程中，bit版本会不停的更新，不论更新是否涉及到咱们负责的模块都应该再回归验证一遍，如果每个case都要手动比对波形来测，那真的很Dirty Work，此时testcase代码自动化就很重要，必须要开动脑筋做成自动化测试，在硬件连接符合要求的情况下，每天在一台fpga上自动跑尽可能多的testcase的回归，确保bit更新没有引入新的问题。</p>
<h2 id="场景验证"><a href="#场景验证" class="headerlink" title="场景验证"></a>场景验证</h2><p>按照项目实际需求，会有多个模块+外设联合工作的场景验证。在rtl freeze以前，必须完成所有ip的验证以及基本的系统级场景验证，工期比较赶的情况下，全面的场景验证将在rtl freeze后进行。</p>
<p>FPGA验证与EDA验证（前仿）作为数字前端设计的双保险，开始做TestCase时不能互相参考，以免思路重复，一些边角case两边都没验到，后期可以互相看下，以免出现我以为他验，他以为我验了这种比较尴尬的情况。流片的压力还是比较大的，但相比设计哥们的压力小一点，工资也比设计哥们低一点。这就是责任的问题，在企业，责任越大价值越大。芯片研发本就具有研发难度与流片风险，作为工程师，有技术底气、做好细节，就不怕担责。</p>
<h1 id="Bringup-SDK软件包交付"><a href="#Bringup-SDK软件包交付" class="headerlink" title="Bringup &amp; SDK软件包交付"></a>Bringup &amp; SDK软件包交付</h1><h2 id="第一次点亮"><a href="#第一次点亮" class="headerlink" title="第一次点亮"></a>第一次点亮</h2><p>rtl freeze后，后端的哥们还有很多工作，最后做出gds文件给Fab厂，Fab厂制造出wafer后给封测厂进行封测，如果一切顺利，将在几个月后收到实体的芯片。将芯片装上socket EVB，Bringup最刺激的时候到了，上电看芯片能不能起来，这种时候所有人都聚集在实验室看软件操作，硬件的哥们会仔细检查电源、晶振是否OK，做启动的软件要先看jtag能不能识别cpu。<br>公司的Socket EVB不方便拍照，这里放上来NXP的一张SocetEVB，结构都比较类似。</p>
<img src="/archives/2e15e323/image-20240719180232126.png" class="">
<h2 id="功能与性能"><a href="#功能与性能" class="headerlink" title="功能与性能"></a>功能与性能</h2><p>芯片启动后，进入后续的Bringup流程，会根据FPGA验证阶段的分工，先验功能再验性能。功能验证从IP到场景，性能会测比如功耗等参数是否达到Spec要求。<br>这个过程中，软件就会开始修建SDK了，在验证代码的基础上进行修改裁剪，保证风格统一、接口简洁。对修改好的代码在fpga上进行验证，验证重点在于确保接口没有严重bug（这里其实需要专业的软件测试流程）。最后编写从系统到单个ip的软件用户手册，通常参考mcu大厂的一些用户手册。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>IC</tag>
        <tag>ARM</tag>
        <tag>FPGA</tag>
      </tags>
  </entry>
  <entry>
    <title>芯片量产测试流程介绍</title>
    <url>/archives/3bc29a18.html</url>
    <content><![CDATA[<img src="/archives/3bc29a18/image-20240819162153805.jpeg" class="">
<p>芯片产业分为设计、制造、封装三大流程，在封装后还会进行量产测试，因此又称为封测流程。今年上半年我在公司负责ASIC SOC的量产测试工程，这里总结一下项目流程，以便日后项目参考。</p>
<span id="more"></span>

<h1 id="Step0-收集产品信息"><a href="#Step0-收集产品信息" class="headerlink" title="Step0 收集产品信息"></a>Step0 收集产品信息</h1><p>大部分芯片产品的商业价值在底层逻辑上都是需要量产来兑现的。一般一个成熟的芯片项目，比如迭代产品，已经有明确量产的市场，那么应该在流片后就开始准备量产测试事宜，如果更赶，则应该在DFT设计确定后开始准备。对于市场不明确、预研性质较高的流片项目，则可以在Bringup后再考虑是否要做量产测试。</p>
<p>在制定具体的Test Plan之前，量产测试工程师应该汇集各方信息，以全面了解DUT设计特性。具体来说，可以跟前端、后端、版图各方同事沟通，获取关于芯片制造的详细信息，汇集成一个表格，这个表格将帮助各方（包括外发供应商）对齐产品信息。</p>
<p>通常要包括以下信息：</p>
<ul>
<li>基本信息：<ul>
<li>产品型号（公用代号）</li>
<li>产品类型 （消费级&#x2F;车规级&#x2F;…）</li>
<li>应用领域</li>
</ul>
</li>
<li>Wafer信息<ul>
<li>Fab （e.g. TSMC 28nm）       </li>
<li>尺寸 （8寸&#x2F;12寸）</li>
<li>厚度</li>
<li>gross die (一片wafer上总共多少die)</li>
<li>die在wafer上的分布信息<ul>
<li>die size with seal ring</li>
<li>street size &#x2F;dicing width</li>
<li>step number</li>
<li>… (不同厂家的命名略有不同，可以拉后端&#x2F;厂家沟通)</li>
</ul>
</li>
<li>die上信息<ul>
<li>die 厚度</li>
<li>pad 数量</li>
<li>pad 尺寸</li>
<li>pad 厚度</li>
<li>pad 材质</li>
<li>circuit under pad （pad下是否有电路）</li>
<li>…</li>
</ul>
</li>
<li>Wafer Map</li>
<li>Pad Loacation</li>
</ul>
</li>
<li>Package信息<ul>
<li>封装方案&#x2F;工艺 （COB&#x2F;WB&#x2F;FCBGA&#x2F;….）</li>
<li>不同封装工艺的Package信息有所不同，量产测试工程师应该多了解制造、封装工艺，这里以FCBGA举例</li>
<li>Bump信息<ul>
<li>Bump类型（Cu-Pillar&#x2F;Plating Solder）</li>
<li>Bump pitch</li>
<li>Bump 高度</li>
<li>Bump 尺寸</li>
<li>…</li>
</ul>
</li>
<li>BGA Pad Location&#x2F; Pin Map</li>
</ul>
</li>
</ul>
<p>这个表格可以随项目推进继续补充信息。</p>
<h1 id="Step1-制定Test-Plan"><a href="#Step1-制定Test-Plan" class="headerlink" title="Step1 制定Test Plan"></a>Step1 制定Test Plan</h1><p>测试工程师需要通过与Designer+DFT同事沟通后，制定一份Test Plan。Test Plan应该包含测试的condition描述、工程批次要收集的数据（e.g. ADC读数、shmoo图）、具体的Test Case。</p>
<p>测试condition需要确认产品是否有需要调整温度、电压、光照等环境参数的测试需求，具体来说，是否需要做高低温测试？高低温要到多少度？跑Case的时候几路电源是否要调整电压？是否需要外部光源？这些都会影响到handler、机台等硬件的方案。</p>
<p>另外对于某些不太成熟的模块，Designer可能会需要量产测试工程师在实验室或工程批调试时帮忙额外收集数据，比如一批芯片的ADC读数，作为一致性依据；又比如需要借助ATE工具获取产品各个case的shmoo图，以更全面了解产品的特性。</p>
<p>接下来就是具体的Test Case，通常Test Case包含4个部分：</p>
<ol>
<li>Continuity Test</li>
<li>DC Test</li>
<li>Gross Function Test &#x2F; IP Test</li>
<li>Function Test</li>
</ol>
<h2 id="Continuity-Test"><a href="#Continuity-Test" class="headerlink" title="Continuity Test"></a>Continuity Test</h2><p>为了首先确保机台到芯片的连接正常，通常最先要做Open Short开短路测试，要求量产测试工程师获取IO后端设计细节，是否每个pin提供对VSS对VDD保护二极管，包括电源管脚、模拟(adc&#x2F;phy)管脚、数字管脚。对于不同的设计要制定对应的OS方案。</p>
<h2 id="DC-Test"><a href="#DC-Test" class="headerlink" title="DC Test"></a>DC Test</h2><p>可选：</p>
<ol>
<li>Gross IDD ：粗测芯片上电后功耗</li>
<li>Static IDD ：load最低功耗pat，测试VDD电流</li>
<li>Dynamic IDD ：load最高功耗pat，测试VDD电流</li>
<li>Input Leakage Test (IIL&amp;IIH)：测量input pin 输入low情况下的漏电流</li>
<li>Output Tristate Leakage Test (IOZL &amp; IOZH)：测量output pin置为高阻态时对应高低两种情况的漏电流</li>
</ol>
<p>要求量产测试工程师获取仿真信息&#x2F;Bringup EVB实测数据，获取上电流程细节+进入高低功耗模式的方法。通常漏电流会有仿真信息，IDD在EVB上会有参考值，具体要认识到不同模式下时钟树的状态。</p>
<h2 id="Gross-Function-Test-IP-Test"><a href="#Gross-Function-Test-IP-Test" class="headerlink" title="Gross Function Test &#x2F; IP Test"></a>Gross Function Test &#x2F; IP Test</h2><p>复杂数字电路依赖DFT进行量产测试。要求量产测试工程师仔细阅读DFT设计文档，了解相关的测试原理，关注每一个DFTcase的如下信息：</p>
<ol>
<li>如何进入DFT mode</li>
<li>DFT mode 下 pin remap到了哪里，重点关注DFT IJTAG与插入的时钟结构</li>
<li>pattern中使用了哪些pad</li>
<li>哪些pad作为异步、同步时钟，频率min max分别多少</li>
<li>pattern执行的timing（DT0 DT1 CT0 CT1），pattern执行的频率</li>
</ol>
<p>对于复杂IP的DFT Test需要根据具体情况来处理：</p>
<p>比如，USB3.0 ip具有ijtag直连进行bist内部测试以及bert外部回环测试的功能，需要阅读IP供应商文档来获取具体的硬件设计指标与ATE操作流程。根据需要可以选型具有高速IP功能的ATE机台，比如93K带有封装好的LVDS功能，可以用来专门测试复杂IP。</p>
<h2 id="Function-Test"><a href="#Function-Test" class="headerlink" title="Function Test"></a>Function Test</h2><p>以上的测试基本可以覆盖数字电路部分以及PHY的部分，芯片上还会有一些数模混合的部分以及die外多chip封装的部分，具体来说，比如ADC、DAC模块，以及封装在一起的Flash芯片，这些通常需要进行功能测试来覆盖。与DFT进入DFT mode再测试不同，Function Test往往是让芯片进入正常的工作状态，通过JTAG&#x2F;SSPI等接口通过寄存器操作外设功能来进行测试。具体一个芯片项目要测哪些Function Test，要与Designer沟通确定方案细节。</p>
<p>CP主要目的是为了检测Foundry的制造问题，FT主要目的是为了检测Package的制造问题，因此二者的Test Plan存在差异。比如CP阶段还没有封装Flash，自然没有Flash测试。另外CP扎针与FT Socket硬件连接上的电气参数也有不同，二者片上散热热阻也有不同，这些区别在特殊情况下也会引入Test Plan中进行不同的处理。</p>
<p>以上就是基本的Test Plan结构，具体还是要看芯片，特殊的产品设计可能需要一些特殊的Test Plan，比如需要耦合CP&#x2F;FT流程，CP阶段的数据存进片内存储，FT再解出来使用。遇到特殊的Test Plan，需要仔细评估可行性，并且联系到硬件平台的spec，比较考验量产测试工程师的综合能力。</p>
<h1 id="Step2-准备硬件"><a href="#Step2-准备硬件" class="headerlink" title="Step2 准备硬件"></a>Step2 准备硬件</h1><p>只有当Test Plan关键细节都确定好后，才能开始准备硬件的环节。根据Test Plan各个case的指标，要做以下硬件准备工作：</p>
<ol>
<li>ATE机台+资源板卡选型+确定site数</li>
<li>ProbeCard&#x2F;LoadBoard+changkit+socket等硬件定制外发</li>
<li>特殊治具定制</li>
</ol>
<h2 id="机台选型"><a href="#机台选型" class="headerlink" title="机台选型"></a>机台选型</h2><p>机台选型第一步是确定Test Plan在哪些机台上是可行的。比如就是要用ATE测LVDS，那么业界主流机台哪些有LVDS功能？</p>
<p>机台选型有几个突出的指标：</p>
<ol>
<li>逻辑通道数</li>
<li>pattern执行IO最大频率</li>
<li>电源板卡供电能力</li>
<li>pattern memory最大支持行数</li>
<li>…(其次是一些特殊IP测试功能)</li>
</ol>
<p>根据前期收集的芯片信息，可以知道一颗芯片测试需要多少电源与IO channel，比如一颗die上有好几百个pad，实际封装后ball有200多个，最后连到ATE机台LPC数字IO的只有100多个，使用Chroma3380P最大IO数资源板卡配置即可实现4site同测。另外，还需要估算确定机台能不能存下Test Plan里所有的Pattern。</p>
<p>第二步是考虑成本与封测厂能力。封测厂有哪些机台可以用？是否支持采购新机台？机时费多少？这些问题要求量产测试工程师提前沟通了解。市面上主流的ATE厂家数量不多，建议优先在主流方案中选型，如果量产测试研发能力强，也可以考虑国产机台，目前新的国产机台功能丰富，但应用是否稳定可靠有待市场验证。</p>
<p>这两步做完，基本可以确定2-3个机台型号并且确定对应的同测site数，通过成本估算可以出一个trade off比较方案。</p>
<h2 id="测试硬件制造外发"><a href="#测试硬件制造外发" class="headerlink" title="测试硬件制造外发"></a>测试硬件制造外发</h2><p>Test Plan确定、机台选型确定后，测试硬件方案基本框架就定下了，对应的测试硬件也不会有太多可选。比如die上有800多个pad的芯片如果做CP，肯定无法做悬臂针，必须上MLO垂直针，不同供应商的垂直针技术还不太一样，价格也有差异。除了CP针的方案，还有机台连接方案：是cable mount、pogo tower还是direct docking？这些芯片信息和Test Plan大致信息同步给供应商，他们一般会要求量产测试工程师填一个产品信息表格，根据对齐的信息会帮忙给一个大致的参考方案。</p>
<p>因此这时的主要工作是和各个供应商沟通，沟通方案细节、价格、交期等事项。大部分的针卡、LB外包商都需要提供原理图，有些也包原理图设计，但无论哪种都需要有一定经验的硬件工程师进行review。如果项目非常赶工，要求在Test Plan没有完全敲定的情况下进行硬件外发，那么可以多做冗余设计，留好余地。与芯片流片类似，需要实体制造的device都需要比较长的准备时间，因此这个时间最好能和tape out重叠，并且尽快发包出去，量产测试工程师还可以并行写代码。</p>
<img src="/archives/3bc29a18/image-20240819170723279.png" class="">

<p>CP的方案除了ProbeCard的设计制造，还有针的制造，部分供应商的MLO针制作不在国内，需要比较长的交期，要求量产测试工程师、PM安排好项目进度。</p>
<p>FT的方案除了LoadBoard的设计，还有Socket、Changkit的制造，有些项目中是由封测厂协助发包，务必确认好三方间的信息，千万注意不要搞出socket尺寸与changekit对不上的这种问题。因此，外发硬件制造完成后，一定要第一时间进行QC，如果有问题返工会对项目进度造成严重影响。</p>
<h2 id="特殊治具定制"><a href="#特殊治具定制" class="headerlink" title="特殊治具定制"></a>特殊治具定制</h2><p>除了以上描述的常规量产测试硬件准备，sensor类芯片往往还需要光学环境，这些在Test Plan制定时最好把光学环境细节确定清楚，要充分考虑机械结构约束，同时如果治具需要固定在针卡、loadboard，那么方案也要同步给外包。</p>
<p>在无锡积高封测听了合肥晶测的光学测试技术介绍，关于光学治具的方案，也可以联合有能力的封测厂及其供应商一起联合制定。</p>
<h1 id="Step3-offline编写ATE测试程序"><a href="#Step3-offline编写ATE测试程序" class="headerlink" title="Step3 offline编写ATE测试程序"></a>Step3 offline编写ATE测试程序</h1><p>理论上只要机台选型结束，ATE工程就可以开始搭建了。各家ATE使用的语言、开发环境都不太一样，但原理相似。在这个阶段主要要做3件事情：</p>
<ol>
<li>转换DFT pattern</li>
<li>实现channel list关系</li>
<li>实现Test Plan到ATE代码</li>
</ol>
<h2 id="转换DFT-pattern"><a href="#转换DFT-pattern" class="headerlink" title="转换DFT pattern"></a>转换DFT pattern</h2><p>通常DFT使用EDA工具（常见Synopsys TestMax与Siemens Tessent）导出的都是标准的wgl或stil格式pattern，不是所有ATE都支持直接使用这些格式的pattern，因此大部分时候需要联系ATE厂家技术支持帮忙转换，转换可能出错，需要协助定位。</p>
<h2 id="实现channel-list关系"><a href="#实现channel-list关系" class="headerlink" title="实现channel list关系"></a>实现channel list关系</h2><p>根据硬件原理图，需要在代码工程里描述机台通道到芯片引脚之间的对应关系，梳理Power pin、IO pin以及relay 控制信号等。做好命名分类，以便后续在程序中调用。</p>
<h2 id="实现Test-Plan到ATE代码"><a href="#实现Test-Plan到ATE代码" class="headerlink" title="实现Test Plan到ATE代码"></a>实现Test Plan到ATE代码</h2><p>这个Step最核心的就是严格按照Test Plan在ATE工程里实现各个case的代码，要求量产测试工程师对机台内部机制有一定了解，通过API调用时，能理解硬件层面具体会发生什么。如果有冗余设计，可以代码上也提前写冗余代码，比如某个case的时钟既可以loadboard晶振外供，也可以机台提供，那么可以准备两份以便实际调试时直接切换。经验丰富的量产测试工程师可以在这个阶段多做工作，以减少后期online调试的时间。做到一定程度量产测试工程师可以拉设计人员一起对ATE工程进行review。这个Step将一直持续到所有硬件环境ready。</p>
<h1 id="Step4-online实验室-工程批调试"><a href="#Step4-online实验室-工程批调试" class="headerlink" title="Step4 online实验室&#x2F;工程批调试"></a>Step4 online实验室&#x2F;工程批调试</h1><p>俗话说干软件三分写七分调，在硬件环境ready后，通常都会在实验室环境进行online调试。CP需要wafer允许的无尘环境以及完整的探针台Probe环境，目前比较少实验室有CP环境，季丰唐镇实验室就支持，<del>但机时费较贵</del>。FT则要求低很多，前期调试可以先不使用handler，而是使用手测器来测试，在实验室调试比在封测厂产线调试价格更划算、调试环境也更好，比较推荐去ATE厂家在local的实验室，方便技术支持。芯片设计大厂有些也会在自己的实验室购置ATE，调试需求很多的话相比租用更省钱。</p>
<p>工程调试比较考验量产测试工程师的综合能力，对于不同的芯片，有很多不同的调试经验技巧。调试的流程通常有以下步骤：</p>
<ol>
<li>确认硬件环境ok、os测试通过</li>
<li>逐个case调pass：确保case代码如预期执行对正常芯片能pass</li>
<li>Bringup故障片筛查（可选）：确认能否筛出Bringup阶段发现的故障片</li>
<li>收集shmoo图、wafer良率分布等数据（可选）</li>
<li>小批量摸底良率</li>
<li>优化代码执行时间</li>
</ol>
<p>对于一个新产品，调试阶段可能会遇到各种各样的问题，需要具体问题具体分析去尝试定位root cause，如果是制造、封装有问题，可能需要与Fab或封测厂沟通。</p>
<h1 id="Step5-Release量产"><a href="#Step5-Release量产" class="headerlink" title="Step5 Release量产"></a>Step5 Release量产</h1><p>如果小批量摸底良率符合预期，遇到的问题基本解决，那么就要准备release给量产。通常封测厂的测试产线都会有自己的生产系统，这个系统会接入Handler或者Probe并调用ATE机台执行测试程序。封测厂会要求量产测试工程师填一个releaseform，里面要描述好程序包名称、测试condition、测试流程、hardware分bin等信息。然后将工程打包发给现场的工程师。通常在产线大批量测试开始前，还会做一些dummy调整以及工程批试产，如果遇到问题，可能还需要远程产线电脑进行调试或者进厂调试。产线会反馈每批次的良率信息，要求量产测试工程师做好数据整理并分析反馈给设计及制造，以作为后续设计优化良率提升参考。得到量产各case良率后，还可以调整case执行顺序来进一步优化整理测试时间。可以根据量产批次推进迭代优化。最后，要求量产测试工程师编写该产品的量产测试报告。</p>
]]></content>
      <categories>
        <category>IC封测</category>
      </categories>
      <tags>
        <tag>IC</tag>
        <tag>CP</tag>
        <tag>FT</tag>
        <tag>ATE</tag>
      </tags>
  </entry>
  <entry>
    <title>裸机多任务的一些摸索</title>
    <url>/archives/53bd0ece.html</url>
    <content><![CDATA[<p>编写程序去自动化地执行一些任务时，难免会遇到一些需要同时执行或者需要执行很久、在不同时刻执行内容不同的程序任务。在成熟的操作系统上，使用多线程的接口来把调度的活儿交给操作系统来完成是非常方便的。从底层看，如果是用的是资源较少的单片机，No-os裸机代码应该如何优雅地完成多任务其实是个比较棘手的问题，尤其是在任务复杂、情况众多并且需要不断迭代增减功能的需求上时更甚。本文将讨论我在编写四旋翼飞行器控制器(2018)与某工业检测设备电机控制器(2019)时，不断迭代中摸索出的一些不成熟的方法，在最近阅读Linux内核源码的过程中，算是对调度算法的一个背景先导总结，也试图为自己日后的裸机多任务开发提供一个更好的架构思路。</p>
<span id="more"></span>

<p>我把需要执行的任务分成三种类型，一是需要快速执行并且需要高频率反复执行的任务，二是需要长时间分不同步骤完成、执行周期较长的任务，三是需要条件触发执行的混合型任务。</p>
<p>一个典型的裸机C程序往往是前后台结构的，以main函数中的infinite loop作为后台，中断服务程序作为前台，用于处理系统的异步事件。以智能车比赛中的小车为例，中断来处理一些与传感器的通信，比如定时器中断去扫描接上了红外传感器的引脚，一方面根据左右偏移误差带入一个需要高频重复执行的电机调速控制来完成循迹，另一方面封装一个函数来记录整车通过的路线情况，通过全局变量把信息传递给后台做判断，在main函数里while1里堆叠while与break即可完成一整套已知地图的赛道程序。这里显然遇到了一个问题，我们在写较长流程的任务时，到底应该用while+break依靠main中while1一次循环时间可以较长的特点来完成长时任务，还是应该把程序设计成while1快速循环，使用if或者switch通过一个变量来切换较长周期内不同时刻的不同任务呢？</p>
<p>我的结论是，虽然while+break十分暴力直接，甚至可以直接暴力delay，不需要像第二种方法一样一直在脑内模拟任务执行从头到尾的每一个时刻的每一个变量的情况，但是顺序长时执行确实难以做到任务的快速切换，比如程序正在某个while中，这时我想切去一个高频任务，只能通过唤起定时器中断来做，又或者我想从此while中跳回前面的while中，在整个大的while1里，我需要把下面的所有while里都做一个if break来循环回去，这显然不科学。</p>
<p>那么我们来看第二种方法，主任务分布在快速循环的while1（时间不可控但也基本不限时）与高频的定时器中断（定时执行时间可控但要快入快出）里。以我之前写的四旋翼飞控为例，我在while1里什么都没做，所有的任务放到systemTickInterrupt中来调度，这是一个5ms的中断，我使用了n个static变量来计数，分别在10ms、15ms、25ms…来执行不同的高频任务，也就是不停地if变量&#x3D;&#x3D;2、3、5，注意这里最好不要用20ms，因为20的时候刚好是10ms的第二次进入，这会造成第20个sysTick中断时间比较长。我在这个中断里配合其他的异步短时中断，完成了整个飞控的姿态控制与三维位置控制，在另一个定时器中断里，通过计时改变全局标志位来完成比赛中的长时流程、自动起飞、悬停……到降落的流程。因为流程并不复杂，所以在此定时器中的编写不需要再去跳跃地切换不同类型的任务，只需要快速重进不停判断。</p>
<p>去年写的某工业检测设备电机控制器程序，长时流程逻辑要复杂很多，不像四旋翼飞行器大部分时候单纯的底层控制是高频重复的，此控制器一方面要控制较长的流程以及流程分支，并且还要大量循环这个较长的流程（工业机器开机就要一直跑），对整个系统的robustness要求较高。一方面因为去年早期时候需求还没明确修修改改了好几个版本，另一方面因为我一心想着回家考研，所以以实现功能为目的没有做好前期的架构设计。最近我开始尝试重构底层代码，我将其称为workFlow模式，本质上它还是快速重进判断调度，在小林学弟修改的版本上，将耗时的工作分到while1中，将主流程放到定时器中断中switch(flag.workFlow)来切换不同的工作状态，只要确保一个工作流有生死闭环即可控制程序在任何你想要的时刻切入你想要执行的任务，并且程序各处都可以通过workFlow来判断流程进行到哪了，比如光电开关外部中断可以在不同的工作流完成不同目的的信息获取。这大大降低了二次开发的成本（改需求你懂的）。这个框架是我自己脑补出来的，我知道肯定有现成的更好的方法，所以需要再学习，多读大佬的代码。</p>
<p>计划是测试完这个No-osVer，我就不再更新框架了，毕竟还是RTOS比较香，想来也确实RTOS比较适合这个项目，有网络通信的部分，后期硬件迭代好上rt-thread试试，我又立了个flag……</p>
<p>下一篇研究一下除了全局变量，任务间有没有其他方法实现通信。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>MCU</tag>
        <tag>OS</tag>
      </tags>
  </entry>
</search>
